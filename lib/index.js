// Generated by CoffeeScript 1.9.1
var _deep_equal, _empty, a, an, be, contain, deep_equal, does_exist, empty, eq, eql, equal, error, exist, expect, greater, greater_or_equal, greater_than, gt, gte, have, include, is_empty, is_ok, length, less, less_or_equal, less_than, lt, lte, match, negate, neq, not_equal, nt, ok, sentence, should_throw, str, than, to, truthy;

_deep_equal = require("deep-equal");

_empty = require("lodash.isempty");

str = function(v) {
  var e;
  try {
    return JSON.stringify(v);
  } catch (_error) {
    e = _error;
    return String(v);
  }
};

exist = {};

empty = {};

error = {};

ok = truthy = {};

is_empty = function(x) {
  return [_empty(x), "expected " + x + " to be empty"];
};

is_ok = function(x) {
  return [!!x, "expected " + x + " to be truthy"];
};

does_exist = function(x) {
  return [x != null, "expected " + x + " to exist"];
};

should_throw = function(f) {
  var e;
  return [
    ((function() {
      try {
        f();
      } catch (_error) {
        e = _error;
      }
      return e != null;
    })()), "expected function to throw an error"
  ];
};

expect = function(x) {
  return function(y) {
    var label, okay, ref;
    if (typeof y !== "function") {
      throw new Error("Pass a function");
    }
    ref = y(x), okay = ref[0], label = ref[1];
    if (!okay) {
      throw new Error(label);
    }
  };
};

than = function(x) {
  return x;
};

eq = equal = function(y) {
  return function(x) {
    return [x === y, "expected " + x + " to equal " + y];
  };
};

neq = not_equal = function(y) {
  return function(x) {
    return [x !== y, "expected " + x + " to not equal " + y];
  };
};

eql = deep_equal = function(x) {
  return function(y) {
    return [
      _deep_equal(x, y, {
        strict: true
      }), "expected " + x + " to deep equal " + y
    ];
  };
};

gt = greater = greater_than = function(y) {
  return function(x) {
    return [x > y, "expected " + x + " to be greater than " + y];
  };
};

lt = less = less_than = function(y) {
  return function(x) {
    return [x < y, "expected " + x + " to be less than " + y];
  };
};

gte = greater_or_equal = function(y) {
  return function(x) {
    return [x >= y, "expected " + x + " to be greater than or equal to " + y];
  };
};

lte = less_or_equal = function(y) {
  return function(x) {
    return [x <= y, "expected " + x + " to be less than or equal to " + y];
  };
};

contain = include = function(x) {
  return function(y) {
    return [y.indexOf(x) !== -1, "expected " + y + " to contain " + x];
  };
};

length = function(x) {
  return function(y) {
    return [y.length === x, "expected " + y + " to have `length` " + x];
  };
};

match = function(x) {
  return function(y) {
    return [x.test(y), "expected " + y + " to match " + x];
  };
};

negate = function(f) {
  return function(x) {
    var label, okay, ref;
    ref = f(x), okay = ref[0], label = ref[1];
    return [!okay, label.replace("expected", "did not expect")];
  };
};

have = function(p) {
  if (typeof p === "function") {
    return p;
  }
  return function(x) {
    return function(y) {
      return [y[p] === x, "expected property " + p + " of " + y + " to equal " + x];
    };
  };
};

a = an = function(x) {
  return function(y) {
    if (x === Object) {
      return [y instanceof x, "expected " + y + " to be an instance of " + x.name];
    }
    return [Object(y) instanceof x, "expected " + y + " to be an instance of " + x.name];
  };
};

be = to = function(x) {
  if (x === empty) {
    return is_empty;
  }
  if (x === ok) {
    return is_ok;
  }
  if (x === exist) {
    return does_exist;
  }
  if (x === error) {
    return should_throw;
  }
  return x;
};

nt = function(f) {
  if (f === empty) {
    return negate(is_empty);
  }
  if (f === ok) {
    return negate(is_ok);
  }
  if (f === exist) {
    return negate(does_exist);
  }
  if (f === error) {
    return negate(should_throw);
  }
  return negate(f);
};

sentence = module.exports = {
  exist: exist,
  empty: empty,
  ok: ok,
  error: error,
  a: a,
  an: an,
  have: have,
  match: match,
  length: length,
  contain: contain,
  include: include,
  negate: negate,
  nt: nt,
  to: to,
  be: be,
  than: than,
  less: less,
  lt: lt,
  less_than: less_than,
  less_or_equal: less_or_equal,
  lte: lte,
  greater: greater,
  gt: gt,
  greater_than: greater_than,
  greater_or_equal: greater_or_equal,
  gte: gte,
  expect: expect,
  equal: equal,
  not_equal: not_equal,
  deep_equal: deep_equal,
  eql: eql
};

Object.defineProperty(sentence, "globals", {
  value: function() {
    Object.keys(sentence).forEach(function(k) {
      return global[k] = sentence[k];
    });
    return sentence;
  }
});
